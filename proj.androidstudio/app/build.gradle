apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.1'
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.lasertoast.lorafel"
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    sourceSets {
        main {
            jni {
                srcDirs = []
//                srcDirs += '../../Classes'
//                srcDirs += '../../Classes/NDKHelper'
//                srcDirs += '../../Classes/jansson'
//                srcDirs += '../../cocos2d/cocos'
//                srcDirs += '../../cocos2d/external'
//                srcDirs += '../../cocos2d/external/firebase_cpp_sdk/include'
//                srcDirs += '../../cocos2d/external/gpg/android/include'
//                srcDirs += '../../cocos2d'
//                srcDirs += '/usr/include/c++/4.2.1'
//                srcDirs += '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include'
            }
            jniLibs {
                dependencies {
                    srcDir 'src/main/jniLibs'
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile file("/Users/delorenj/code/cocos2d/external/firebase_cpp_sdk/libs/android/app.pro")
            proguardFile file("/Users/delorenj/code/cocos2d/external/firebase_cpp_sdk/libs/android/auth.pro")
        }
        debug {
            debuggable = true
            jniDebuggable = true
        }
    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFile getDefaultProguardFile('proguard-android.txt')
//            proguardFile file("/Users/delorenj/code/cocos2d/external/firebase_cpp_sdk/libs/android/app.pro")
//            proguardFile file("/Users/delorenj/code/cocos2d/external/firebase_cpp_sdk/libs/android/auth.pro")
//        }
//    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile project(':libcocos2dx')
    provided 'org.apache.httpcomponents:httpcore:4.4.3'
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.google.firebase:firebase-auth:9.4.0'
    compile 'com.google.firebase:firebase-database:9.4.0'
    compile 'com.google.android.gms:play-services-base:9.4.0'
    compile 'com.google.android.gms:play-services-auth:9.4.0'
}

// Pre-experimental Gradle plug-in NDK boilerplate below.
// Right now the Firebase plug-in does not work with the experimental
// Gradle plug-in so we're using ndk-build for the moment.
project.ext {
    // Configure the Firebase C++ SDK location.
    firebase_cpp_sdk_dir = System.getProperty('firebase_cpp_sdk.dir')
    if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
        firebase_cpp_sdk_dir = System.getenv('FIREBASE_CPP_SDK_DIR')
        if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
            if ((new File('firebase_cpp_sdk')).exists()) {
                firebase_cpp_sdk_dir = 'firebase_cpp_sdk'
            } else {
                throw new StopActionException(
                        'firebase_cpp_sdk.dir property or the FIREBASE_CPP_SDK_DIR ' +
                                'environment variable must be set to reference the Firebase C++ ' +
                                'SDK install directory.  This is used to configure static library ' +
                                'and C/C++ include paths for the SDK.')
            }
        }
    }
    if (!(new File(firebase_cpp_sdk_dir)).exists()) {
        throw new StopActionException(
                sprintf('Firebase C++ SDK directory %s does not exist',
                        firebase_cpp_sdk_dir))
    }
    // Check the NDK location using the same configuration options as the
    // experimental Gradle plug-in.
        ndk_dir = "/Users/delorenj/Library/Android/sdk/ndk-bundle"
        if (ndk_dir == null || ndk_dir.isEmpty()) {
            throw new StopActionException(
                    'Android NDK directory should be specified using the ndk.dir ' +
                            'property or ANDROID_NDK_HOME environment variable.')
        }
}

apply plugin: 'com.google.gms.google-services'


task ndkBuildCompile(type: Exec) {
    description 'Use ndk-build to compile the C++ application.'
    commandLine("${project.ext.ndk_dir}${File.separator}ndk-build",
            "FIREBASE_CPP_SDK_DIR=${project.ext.firebase_cpp_sdk_dir}",
            sprintf("APP_PLATFORM=android-%d",
                    android.defaultConfig.minSdkVersion.mApiLevel)
    )
}
//
task ndkBuildClean(type: Exec) {
    description 'Use ndk-build to clean the C++ application.'
    commandLine("${project.ext.ndk_dir}${File.separator}ndk-build",
            "FIREBASE_CPP_SDK_DIR=${project.ext.firebase_cpp_sdk_dir}",
            "clean")
}

// Once the Android Gradle plug-in has generated tasks, add dependencies for
// the ndk-build targets.
project.afterEvaluate {
    preBuild.dependsOn(ndkBuildCompile)
    clean.dependsOn(ndkBuildClean)
}
