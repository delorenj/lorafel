apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    useLibrary  'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.lasertoast.lorafel"
        minSdkVersion 14
        targetSdkVersion 14
        versionCode 1
        versionName "1.0"
    }
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        // This is not necessary unless you have precompiled libraries in your project.
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
//    compile 'com.google.firebase:firebase-auth:9.4.0'
//    compile 'com.google.android.gms:play-services-base:9.4.0'
//    compile 'org.apache.httpcomponents:httpcore:4.4.3'
    compile project(':libcocos2dx')
}

// Pre-experimental Gradle plug-in NDK boilerplate below.
// Right now the Firebase plug-in does not work with the experimental
// Gradle plug-in so we're using ndk-build for the moment.
project.ext {
    // Configure the Firebase C++ SDK location.
    firebase_cpp_sdk_dir = System.getProperty('firebase_cpp_sdk.dir')
    if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
        firebase_cpp_sdk_dir = System.getenv('FIREBASE_CPP_SDK_DIR')
        if (firebase_cpp_sdk_dir == null || firebase_cpp_sdk_dir.isEmpty()) {
            if ((new File('firebase_cpp_sdk')).exists()) {
                firebase_cpp_sdk_dir = 'firebase_cpp_sdk'
            } else {
                throw new StopActionException(
                        'firebase_cpp_sdk.dir property or the FIREBASE_CPP_SDK_DIR ' +
                                'environment variable must be set to reference the Firebase C++ ' +
                                'SDK install directory.  This is used to configure static library ' +
                                'and C/C++ include paths for the SDK.')
            }
        }
    }
    if (!(new File(firebase_cpp_sdk_dir)).exists()) {
        throw new StopActionException(
                sprintf('Firebase C++ SDK directory %s does not exist',
                        firebase_cpp_sdk_dir))
    }
    // Check the NDK location using the same configuration options as the
    // experimental Gradle plug-in.
    ndk_dir = project.android.ndkDirectory
    if (ndk_dir == null || !ndk_dir.exists()) {
        ndk_dir = System.getenv('ANDROID_NDK_HOME')
        if (ndk_dir == null || ndk_dir.isEmpty()) {
            throw new StopActionException(
                    'Android NDK directory should be specified using the ndk.dir ' +
                            'property or ANDROID_NDK_HOME environment variable.')
        }
    }
}

apply plugin: 'com.google.gms.google-services'


//task ndkBuildCompile(type:Exec) {
//    description 'Use ndk-build to compile the C++ application.'
//    commandLine("${project.ext.ndk_dir}${File.separator}ndk-build",
//            "FIREBASE_CPP_SDK_DIR=${project.ext.firebase_cpp_sdk_dir}",
//            sprintf("APP_PLATFORM=android-%d",
//                    android.defaultConfig.minSdkVersion.mApiLevel))
//}
//
//task ndkBuildClean(type:Exec) {
//    description 'Use ndk-build to clean the C++ application.'
//    commandLine("${project.ext.ndk_dir}${File.separator}ndk-build",
//            "FIREBASE_CPP_SDK_DIR=${project.ext.firebase_cpp_sdk_dir}",
//            "clean")
//}

// Once the Android Gradle plug-in has generated tasks, add dependencies for
// the ndk-build targets.
//project.afterEvaluate {
//    preBuild.dependsOn(ndkBuildCompile)
//    clean.dependsOn(ndkBuildClean)
//}